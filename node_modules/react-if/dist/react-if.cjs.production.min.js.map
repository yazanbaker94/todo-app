{"version":3,"file":"react-if.cjs.production.min.js","sources":["../src/render.tsx","../src/Case.tsx","../src/Default.tsx","../src/Else.tsx","../src/getConditionResults.ts","../src/Then.tsx","../src/Unless.tsx","../src/When.tsx","../src/If.tsx","../src/Switch.tsx"],"sourcesContent":["import React, { FC, Fragment } from 'react';\n\n/**\n * Renders a React component while also checking whether the children are a function or not\n * @param props Props of the component to render\n */\nexport const render: FC = props => {\n  if (typeof props.children === 'function') {\n    return <Fragment>{props.children()}</Fragment>;\n  }\n\n  return <Fragment>{props.children || null}</Fragment>;\n};\n","import { FC } from 'react';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/**\n * If the `<Case />` is the first one to have its condition evaluates to true\n * inside the parent `<Switch />` it will be the only rendered.\n * @param props The props to pass down to the `<Case />` component\n */\nexport const Case: FC<ComponentWithConditionProps> = props => render(props);\n\nCase.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * If no `<Case />` have its condition evaluates to true inside the parent `<Switch />`,\n * the first `<Default />` will be the only one rendered.\n * @param props The props to pass down to the `<Default />` component\n */\nexport const Default: FC = props => render(props);\n\nDefault.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * Must only contain a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Else />` component\n */\nexport const Else: FC = props => render(props);\n","import { BooleanLike } from './types';\n\n/**\n * Resolves a condition that is {@link BooleanLike} or returns {@link BooleanLike} from a function\n * @param condition The condition to resolve\n */\nexport const getConditionResult = (condition: BooleanLike | ((...args: unknown[]) => BooleanLike)) => {\n  const conditionResult = Boolean(typeof condition === 'function' ? condition() : condition);\n\n  return conditionResult;\n};\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * Must contain only a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Then />` component\n */\nexport const Then: FC = props => render(props);\n","import { FC } from 'react';\nimport { getConditionResult } from './getConditionResults';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Else>\n *         { ... }\n *     </Else>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Else />` block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const Unless: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  const conditionResult = Boolean(getConditionResult(condition));\n\n  return !conditionResult && children ? render({ children }) : null;\n};\n\nUnless.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { getConditionResult } from './getConditionResults';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Then>\n *         { ... }\n *     </Then>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Then /`> block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const When: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  const conditionResult = Boolean(getConditionResult(condition));\n\n  return conditionResult && children ? render({ children }) : null;\n};\n\nWhen.defaultProps = {\n  children: null\n};\n","import React, { FC, Fragment, ReactElement } from 'react';\nimport { Else } from './Else';\nimport { getConditionResult } from './getConditionResults';\nimport { invariant } from './invariant';\nimport { Then } from './Then';\nimport { ComponentWithConditionProps } from './types';\n\n/**\n * If condition evaluates to true, renders the `<Then />` block will be rendered,\n * otherwise renders the `<Else />` block. Either block may be omitted.\n *\n * This component can contain any number of `<Then />` or `<Else />` blocks,\n * but only the first block of the right type (either Then or Else, depending on the condition) will be rendered.\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const If: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  if (!children) {\n    return null;\n  }\n\n  invariant(\n    (!Array.isArray(children) && !((children as ReactElement).type === Else || (children as ReactElement).type === Then)) ||\n      !(React.Children.toArray(children) as ReactElement[]).every(child => child.type === Else || child.type === Then),\n    'The <If> component should contain <Then /> and <Else /> components as its children'\n  );\n\n  const conditionResult = getConditionResult(condition);\n\n  return (\n    <Fragment>{(React.Children.toArray(children) as ReactElement[]).find(c => (c.type !== Else) !== !conditionResult) || null}</Fragment>\n  );\n};\n","import React, { FC, ReactElement } from 'react';\nimport { Case } from './Case';\nimport { Default } from './Default';\nimport { getConditionResult } from './getConditionResults';\n\n/**\n * It will render the first matching `<Case />`, or the first encountered `<Default />` (or `null`).\n *\n * This component can contain any number of `<Case />` and one `<Default />` blocks\n * @param __namedParameters Children to pass into the `<Switch />` component\n */\nexport const Switch: FC = ({ children }) => {\n  // -- Inspired by react-router --\n\n  // We use React.Children.forEach instead of React.Children.toArray().find()\n  // here because toArray adds keys to all child elements and we do not want\n  // to trigger an unmount/remount for two children <Case>s or <Default>s\n  let matchingCase: ReactElement | undefined = undefined;\n  let defaultCase: ReactElement | undefined = undefined;\n\n  React.Children.forEach(children, child => {\n    // not a valid react child, don't add it\n    /* istanbul ignore next - This is only a safe fail for people writing bad code */\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (!matchingCase && child.type === Case) {\n      const condition = child.props.condition;\n\n      const conditionResult = getConditionResult(condition);\n\n      if (conditionResult) {\n        matchingCase = child;\n      } // else not matching condition, don't add it\n    } else if (!defaultCase && child.type === Default) {\n      defaultCase = child;\n    } // else unknown type, don't add it\n  });\n\n  return matchingCase ?? defaultCase ?? null;\n};\n"],"names":["render","props","React","Fragment","children","Case","defaultProps","Default","Else","getConditionResult","condition","Boolean","Then","Unless","When","Array","isArray","type","Children","toArray","every","child","conditionResult","find","c","matchingCase","undefined","defaultCase","forEach","isValidElement"],"mappings":"6FAMaA,EAAa,SAAAC,UAEfC,gBAACC,gBADoB,mBAAnBF,EAAMG,SACGH,EAAMG,WAGRH,EAAMG,UAAY,OCFzBC,EAAwC,SAAAJ,UAASD,EAAOC,IAErEI,EAAKC,aAAe,CAClBF,SAAU,UCJCG,EAAc,SAAAN,UAASD,EAAOC,IAE3CM,EAAQD,aAAe,CACrBF,SAAU,UCHCI,EAAW,SAAAP,UAASD,EAAOC,ICF3BQ,EAAqB,SAACC,UACTC,QAA6B,mBAAdD,EAA2BA,IAAcA,ICCrEE,EAAW,SAAAX,UAASD,EAAOC,ICW3BY,EAA0C,gBAAcT,IAAAA,gBAC3CO,QAAQF,IADwBC,aAG7BN,EAAWJ,EAAO,CAAEI,SAAAA,IAAc,MAG/DS,EAAOP,aAAe,CACpBF,SAAU,UCPCU,EAAwC,gBAAcV,IAAAA,gBACzCO,QAAQF,IADsBC,aAG5BN,EAAWJ,EAAO,CAAEI,SAAAA,IAAc,MAG9DU,EAAKR,aAAe,CAClBF,SAAU,iECXuC,gBAAGM,IAAAA,UAAWN,IAAAA,aAC1DA,SACI,MAILW,MAAMC,QAAQZ,IAAgBA,EAA0Ba,OAAST,GAASJ,EAA0Ba,OAASL,IAC3GV,EAAMgB,SAASC,QAAQf,GAA6BgB,OAAM,SAAAC,UAASA,EAAMJ,OAAST,GAAQa,EAAMJ,OAASL,SAIzGU,EAAkBb,EAAmBC,UAGzCR,gBAACC,gBAAWD,EAAMgB,SAASC,QAAQf,GAA6BmB,MAAK,SAAAC,UAAMA,EAAEP,OAAST,IAAWc,MAAoB,sBClB/F,oBAMpBG,OAAyCC,EACzCC,OAAwCD,SAE5CxB,EAAMgB,SAASU,UATYxB,UASM,SAAAiB,GAG1BnB,EAAM2B,eAAeR,KAIrBI,GAAgBJ,EAAMJ,OAASZ,EAQxBsB,GAAeN,EAAMJ,OAASV,IACxCoB,EAAcN,GANUZ,EAFNY,EAAMpB,MAAMS,aAK5Be,EAAeJ,yBAOdI,KAAgBE,KAAe"}