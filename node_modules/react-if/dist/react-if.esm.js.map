{"version":3,"file":"react-if.esm.js","sources":["../src/render.tsx","../src/Case.tsx","../src/Default.tsx","../src/Else.tsx","../src/getConditionResults.ts","../src/invariant.ts","../src/Then.tsx","../src/If.tsx","../src/Switch.tsx","../src/Unless.tsx","../src/When.tsx"],"sourcesContent":["import React, { FC, Fragment } from 'react';\n\n/**\n * Renders a React component while also checking whether the children are a function or not\n * @param props Props of the component to render\n */\nexport const render: FC = props => {\n  if (typeof props.children === 'function') {\n    return <Fragment>{props.children()}</Fragment>;\n  }\n\n  return <Fragment>{props.children || null}</Fragment>;\n};\n","import { FC } from 'react';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/**\n * If the `<Case />` is the first one to have its condition evaluates to true\n * inside the parent `<Switch />` it will be the only rendered.\n * @param props The props to pass down to the `<Case />` component\n */\nexport const Case: FC<ComponentWithConditionProps> = props => render(props);\n\nCase.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * If no `<Case />` have its condition evaluates to true inside the parent `<Switch />`,\n * the first `<Default />` will be the only one rendered.\n * @param props The props to pass down to the `<Default />` component\n */\nexport const Default: FC = props => render(props);\n\nDefault.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * Must only contain a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Else />` component\n */\nexport const Else: FC = props => render(props);\n","import { BooleanLike } from './types';\n\n/**\n * Resolves a condition that is {@link BooleanLike} or returns {@link BooleanLike} from a function\n * @param condition The condition to resolve\n */\nexport const getConditionResult = (condition: BooleanLike | ((...args: unknown[]) => BooleanLike)) => {\n  const conditionResult = Boolean(typeof condition === 'function' ? condition() : condition);\n\n  return conditionResult;\n};\n","/**\n * Handles errors by throwing them to the console.\n * `__DEV__` is replaced by tsdx using {@link https://www.npmjs.com/package/babel-plugin-dev-expression babel-plugin-dev-expressions}\n * which will ensure this entire throw is not present in production\n * @param condition The condition to check\n * @param message The message to throw if `condition` resolves to `true`\n */\nexport function invariant(condition: boolean, message: string): asserts condition {\n  if (__DEV__) {\n    if (condition) {\n      throw new Error(message);\n    }\n  }\n}\n","import { FC } from 'react';\nimport { render } from './render';\n\n/**\n * Must contain only a single child, which it renders as-is.\n * Should not be used outside of an `<If />` block.\n * @param props The props to pass down to the `<Then />` component\n */\nexport const Then: FC = props => render(props);\n","import React, { FC, Fragment, ReactElement } from 'react';\nimport { Else } from './Else';\nimport { getConditionResult } from './getConditionResults';\nimport { invariant } from './invariant';\nimport { Then } from './Then';\nimport { ComponentWithConditionProps } from './types';\n\n/**\n * If condition evaluates to true, renders the `<Then />` block will be rendered,\n * otherwise renders the `<Else />` block. Either block may be omitted.\n *\n * This component can contain any number of `<Then />` or `<Else />` blocks,\n * but only the first block of the right type (either Then or Else, depending on the condition) will be rendered.\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const If: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  if (!children) {\n    return null;\n  }\n\n  invariant(\n    (!Array.isArray(children) && !((children as ReactElement).type === Else || (children as ReactElement).type === Then)) ||\n      !(React.Children.toArray(children) as ReactElement[]).every(child => child.type === Else || child.type === Then),\n    'The <If> component should contain <Then /> and <Else /> components as its children'\n  );\n\n  const conditionResult = getConditionResult(condition);\n\n  return (\n    <Fragment>{(React.Children.toArray(children) as ReactElement[]).find(c => (c.type !== Else) !== !conditionResult) || null}</Fragment>\n  );\n};\n","import React, { FC, ReactElement } from 'react';\nimport { Case } from './Case';\nimport { Default } from './Default';\nimport { getConditionResult } from './getConditionResults';\n\n/**\n * It will render the first matching `<Case />`, or the first encountered `<Default />` (or `null`).\n *\n * This component can contain any number of `<Case />` and one `<Default />` blocks\n * @param __namedParameters Children to pass into the `<Switch />` component\n */\nexport const Switch: FC = ({ children }) => {\n  // -- Inspired by react-router --\n\n  // We use React.Children.forEach instead of React.Children.toArray().find()\n  // here because toArray adds keys to all child elements and we do not want\n  // to trigger an unmount/remount for two children <Case>s or <Default>s\n  let matchingCase: ReactElement | undefined = undefined;\n  let defaultCase: ReactElement | undefined = undefined;\n\n  React.Children.forEach(children, child => {\n    // not a valid react child, don't add it\n    /* istanbul ignore next - This is only a safe fail for people writing bad code */\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (!matchingCase && child.type === Case) {\n      const condition = child.props.condition;\n\n      const conditionResult = getConditionResult(condition);\n\n      if (conditionResult) {\n        matchingCase = child;\n      } // else not matching condition, don't add it\n    } else if (!defaultCase && child.type === Default) {\n      defaultCase = child;\n    } // else unknown type, don't add it\n  });\n\n  return matchingCase ?? defaultCase ?? null;\n};\n","import { FC } from 'react';\nimport { getConditionResult } from './getConditionResults';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Else>\n *         { ... }\n *     </Else>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Else />` block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const Unless: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  const conditionResult = Boolean(getConditionResult(condition));\n\n  return !conditionResult && children ? render({ children }) : null;\n};\n\nUnless.defaultProps = {\n  children: null\n};\n","import { FC } from 'react';\nimport { getConditionResult } from './getConditionResults';\nimport { render } from './render';\nimport { ComponentWithConditionProps } from './types';\n\n/** A shorthand for\n *\n * ```jsx\n * <If condition={...}>\n *     <Then>\n *         { ... }\n *     </Then>\n * </If>\n * ```\n *\n * The same rules apply to the child elements as with using the `<Then /`> block.\n *\n * @param __namedParameters The props to pass down to the `<IF />` component, see {@link ComponentWithConditionProps}\n */\nexport const When: FC<ComponentWithConditionProps> = ({ condition, children }) => {\n  const conditionResult = Boolean(getConditionResult(condition));\n\n  return conditionResult && children ? render({ children }) : null;\n};\n\nWhen.defaultProps = {\n  children: null\n};\n"],"names":["render","props","children","React","Fragment","Case","defaultProps","Default","Else","getConditionResult","condition","conditionResult","Boolean","invariant","message","Error","Then","If","Array","isArray","type","Children","toArray","every","child","find","c","Switch","matchingCase","undefined","defaultCase","forEach","isValidElement","Unless","When"],"mappings":"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"}